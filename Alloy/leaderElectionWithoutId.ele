open util/ordering[Node]

sig Node {
	succ : one Node,
	var inbox : set Node,
	var outbox : set Node
}

fact ring {
	all n : Node | Node in n.^succ
}

fun elected : set Node {
	{n : Node | once (n in n.inbox)}
}

pred send [n : Node] { 
	some i : n.outbox {
		(n.succ).inbox' = (n.succ).inbox +  i
		n.outbox' = n.outbox - i
	}
	all m : Node - n.succ | m.inbox' = m.inbox
	all m : Node - n | m.outbox' = m.outbox
}

pred compute [n : Node] {
	some i : n.inbox {
		n.inbox' = n.inbox - i
		n.outbox' = n.outbox + (i - n.*(~next))
	}
	all m : Node - n | m.inbox' = m.inbox
	all m : Node - n | m.outbox' = m.outbox
}

pred skip {
	inbox' = inbox
	outbox' = outbox
}

fact init {
	no inbox
	outbox = Node->Node & iden 
}

fact transitions {
	always (skip or some n : Node | send[n] or compute[n])
}

assert safety {
	after one elected implies after (always one elected)
}

check safety

pred sendEnabled [n : Node] { some n.outbox }
pred computeEnabled [n : Node] { some n.inbox }

pred fairness {
	all n : Node {
		(eventually always sendEnabled[n] implies (always eventually send[n]))
		(eventually always computeEnabled[n] implies (always eventually compute[n]))
	}
}

assert liveness {
	fairness and some Node implies eventually some elected
}

check liveness

enum Event {Skip, Send, Compute}

fun occurs : one Event {
	skip implies Skip else
	(some n : Node | send[n]) implies Send else
	Compute 
}

run {eventually some elected} for 4 but exactly 4 Node, 10 Time

